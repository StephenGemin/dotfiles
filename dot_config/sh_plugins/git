# The git prompt's git commands are read-only and should not interfere with
# other processes. This environment variable is equivalent to running with `git
# --no-optional-locks`, but falls back gracefully for older versions of git.
# See git(1) for and git-status(1) for a description of that flag.

function __git_prompt_git() {
  GIT_OPTIONAL_LOCKS=0 command git "$@"
}

function git_current_branch() {
  local ref
  ref=$(__git_prompt_git symbolic-ref --quiet HEAD 2> /dev/null)
  local ret=$?
  if [ $ret -ne 0 ]; then
    [ $ret -eq 128 ] && return  # no git repo.
    ref=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null) || return
  fi
  echo ${ref#refs/heads/}
}

# Check for develop and similarly named branches
function git_develop_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local branch
  for branch in dev devel develop development; do
    if command git show-ref -q --verify refs/heads/$branch; then
      echo $branch
      return 0
    fi
  done

  # If no develop branch was found, use fall back but return error
  echo develop
  return 1
}

# Check if main exists and use instead of master
function git_main_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local ref
  for ref in refs/{heads,remotes/{origin,upstream}}/{main,master,trunk,mainline,default,stable}; do
    if command git show-ref -q --verify $ref; then
      echo ${ref:t}
      return 0
    fi
  done

  # If no main branch was found, use fall back but return error
  echo main
  return 1
}

# my most used commands
alias gac='git add --all && git commit --verbose'
alias gac!='git add --all && git commit --verbose --amend'
function gacfx() { git add --all && git commit --verbose --fixup $1 }
function grbo() { git rebase --interactive origin/"$1" }
alias gacpo='git add --all && git commit --verbose && git push origin'
alias gacpo!='git add --all && git commit --amend && git push --force-with-lease origin --set-upstream $(git_current_branch)'
alias gacnvpo!='git add --all && git commit --amend --no-verify && git push origin --force-with-lease --set-upstream $(git_current_branch)'
alias gds='git diff --stat'
function gl() { git log --oneline -"${1:-15}"; }
alias gwip='git add --all && git commit -v -m "[skip-ci] WIP"'

alias g='git'
alias ga='git add --all'
alias gaa='git add'  # git add any

alias gb='git branch'
alias gbr='git branch -r'
alias gbl='git branch -l'
alias gco='git checkout'
alias gcob='git checkout -b'
alias gcoB='git checkout -B'
alias gcod='git checkout $(git_develop_branch)'
alias gcom='git checkout $(git_main_branch)'

alias gcp='git cherry-pick'
alias gcpa='git cherry-pick --abort'
alias gcpc='git cherry-pick --continue'
alias gacpc='git add --all && git cherry-pick --continue'

alias gc='git commit --verbose'
alias gc!='git commit --verbose --amend'

alias gd='git diff'
alias gs='git status'
alias gsh='git show'
alias glastsha='git log -1 --pretty="%H"'  # output full sha of last commit

alias gf='git fetch -v'
alias gfo='git fetch origin'
alias gfu='git fetch upstream'
alias gpl='git pull -v'
alias gplr='git pull --rebase -v'

# aliases are set to gg because gp is a protected alias in powershell (Windows)
alias gg='git push -v'
alias ggo='git push -v origin'
alias ggo!='git push origin --force'
alias ggof='git push origin --force-with-lease'
alias ggu='git push -v upstream'

alias gm='git merge'
alias gma='git merge --abort'
alias gmc='git merge --continue'
alias gms="git merge --squash"
alias gmff="git merge --ff-only"
alias gmom='git merge origin/$(git_main_branch)'
alias gmum='git merge upstream/$(git_main_branch)'
alias gmod='git merge origin/$(git_develop_branch)'

alias grb='git rebase --interactive'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias garbc='git add --all && git rebase --continue'
function grbu() { git rebase --interactive upstream/"$1" }
alias grbd='git rebase --interactive origin/$(git_develop_branch)'
alias grbm='git rebase --interactive origin/$(git_main_branch)'
alias grbum='git rebase --interactive upstream/$(git_main_branch)'

alias grs='git reset'
function grsh() { if [ -z "$1" ]; then git reset HEAD~1; else git reset HEAD~"$1"; fi; }

alias gsts='git stash save'
alias gstc='git stash clear'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gstp='git stash pop'

# more personal aliases & functions
# nkf family -> checkout to branch, nuke previous local branch, then pull
#function nkf() { CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD); git checkout $1 && git branch -D $CURRENT_BRANCH && git pull; }
function gnkf() { CURRENT_BRANCH=$(git_current_branch); git checkout $1 && git branch -D $CURRENT_BRANCH && git pull; }
function gnkfm() { CURRENT_BRANCH=$(git_current_branch); git checkout $(git_main_branch) && git branch -D $CURRENT_BRANCH && git pull }
function gnkfd() { CURRENT_BRANCH=$(git_current_branch); git checkout $(git_develop_branch) && git branch -D $CURRENT_BRANCH && git pull }


# add-hoc aliases & functions
function migrate-origin() {
    git remote remove origin && \
    git remote add origin "$1" && \
    git fetch && \
    git checkout "$2" && \
    git branch --set-upstream-to=origin/"$2" "$2" && \
    git fetch
}
